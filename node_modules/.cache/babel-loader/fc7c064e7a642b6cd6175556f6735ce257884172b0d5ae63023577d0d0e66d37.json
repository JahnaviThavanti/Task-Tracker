{"ast":null,"code":"const BASE_URL = 'http://localhost:3001';\nexport const taskService = {\n  // Fetch all tasks for a specific user\n  async getUserTasks(userId) {\n    try {\n      const response = await fetch(`${BASE_URL}/tasks?userId=${userId}`);\n      const tasks = await response.json();\n      return tasks;\n    } catch (error) {\n      console.error('Get tasks error:', error);\n      throw error;\n    }\n  },\n  // Create a new task\n  async createTask(taskData) {\n    try {\n      const response = await fetch(`${BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...taskData,\n          id: Date.now().toString(),\n          createdAt: new Date().toISOString()\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Create task error:', error);\n      throw error;\n    }\n  },\n  // Update a task\n  async updateTask(taskId, updates) {\n    try {\n      const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Update task error:', error);\n      throw error;\n    }\n  },\n  // Delete a task\n  async deleteTask(taskId) {\n    try {\n      await fetch(`${BASE_URL}/tasks/${taskId}`, {\n        method: 'DELETE'\n      });\n      return true;\n    } catch (error) {\n      console.error('Delete task error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","taskService","getUserTasks","userId","response","fetch","tasks","json","error","console","createTask","taskData","method","headers","body","JSON","stringify","id","Date","now","toString","createdAt","toISOString","updateTask","taskId","updates","deleteTask"],"sources":["A:/Projects/FrontEnd/React Apps/task-tracker/src/services/taskService.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3001';\r\n\r\nexport const taskService = {\r\n  // Fetch all tasks for a specific user\r\n  async getUserTasks(userId) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/tasks?userId=${userId}`);\r\n      const tasks = await response.json();\r\n      return tasks;\r\n    } catch (error) {\r\n      console.error('Get tasks error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new task\r\n  async createTask(taskData) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/tasks`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...taskData,\r\n          id: Date.now().toString(),\r\n          createdAt: new Date().toISOString()\r\n        }),\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Create task error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update a task\r\n  async updateTask(taskId, updates) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updates),\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Update task error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a task\r\n  async deleteTask(taskId) {\r\n    try {\r\n      await fetch(`${BASE_URL}/tasks/${taskId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Delete task error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,WAAW,GAAG;EACzB;EACA,MAAMC,YAAYA,CAACC,MAAM,EAAE;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,iBAAiBG,MAAM,EAAE,CAAC;MAClE,MAAMG,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACnC,OAAOD,KAAK;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,UAAUA,CAACC,QAAQ,EAAE;IACzB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,QAAQ,EAAE;QAChDY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,GAAGL,QAAQ;UACXM,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;UACzBC,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACpC,CAAC;MACH,CAAC,CAAC;MACF,OAAO,MAAMlB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMe,UAAUA,CAACC,MAAM,EAAEC,OAAO,EAAE;IAChC,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,UAAUwB,MAAM,EAAE,EAAE;QAC1DZ,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,OAAO;MAC9B,CAAC,CAAC;MACF,OAAO,MAAMrB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMkB,UAAUA,CAACF,MAAM,EAAE;IACvB,IAAI;MACF,MAAMnB,KAAK,CAAC,GAAGL,QAAQ,UAAUwB,MAAM,EAAE,EAAE;QACzCZ,MAAM,EAAE;MACV,CAAC,CAAC;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}