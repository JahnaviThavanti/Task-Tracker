{"ast":null,"code":"const BASE_URL = 'http://localhost:3001';\nexport const authService = {\n  async login(email, password) {\n    try {\n      const response = await fetch(`${BASE_URL}/users?email=${email}`);\n      const users = await response.json();\n      const user = users[0];\n      if (user && user.password === password) {\n        // Remove password before storing/returning user data\n        const {\n          password: _,\n          ...safeUser\n        } = user;\n        return safeUser;\n      }\n      throw new Error('Invalid credentials');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const userJson = localStorage.getItem('user');\n      if (!userJson) return null;\n      const user = JSON.parse(userJson);\n      const response = await fetch(`${BASE_URL}/users/${user.id}`);\n      if (!response.ok) {\n        localStorage.removeItem('user');\n        return null;\n      }\n      const currentUser = await response.json();\n      const {\n        password: _,\n        ...safeUser\n      } = currentUser;\n      return safeUser;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      return null;\n    }\n  },\n  async getAllUsers() {\n    try {\n      const response = await fetch(`${BASE_URL}/users`);\n      const users = await response.json();\n      // Remove passwords before returning\n      return users.map(user => {\n        const {\n          password,\n          ...safeUser\n        } = user;\n        return safeUser;\n      });\n    } catch (error) {\n      console.error('Get users error:', error);\n      throw error;\n    }\n  },\n  async createUser(userData) {\n    try {\n      const response = await fetch(`${BASE_URL}/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...userData,\n          id: Date.now().toString() // Simple ID generation\n        })\n      });\n      const newUser = await response.json();\n      const {\n        password,\n        ...safeUser\n      } = newUser;\n      return safeUser;\n    } catch (error) {\n      console.error('Create user error:', error);\n      throw error;\n    }\n  },\n  async updateUser(id, userData) {\n    try {\n      const response = await fetch(`${BASE_URL}/users/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const updatedUser = await response.json();\n      const {\n        password,\n        ...safeUser\n      } = updatedUser;\n      return safeUser;\n    } catch (error) {\n      console.error('Update user error:', error);\n      throw error;\n    }\n  },\n  async deleteUser(id) {\n    try {\n      await fetch(`${BASE_URL}/users/${id}`, {\n        method: 'DELETE'\n      });\n      return true;\n    } catch (error) {\n      console.error('Delete user error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","authService","login","email","password","response","fetch","users","json","user","_","safeUser","Error","error","console","getCurrentUser","userJson","localStorage","getItem","JSON","parse","id","ok","removeItem","currentUser","getAllUsers","map","createUser","userData","method","headers","body","stringify","Date","now","toString","newUser","updateUser","updatedUser","deleteUser"],"sources":["C:/Users/tnara/OneDrive/Documents/GitHub/OCUFrontendWebDev/completed apps/fall24block2/task-tracker/src/services/authService.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3001';\r\n\r\nexport const authService = {\r\n  async login(email, password) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/users?email=${email}`);\r\n      const users = await response.json();\r\n      \r\n      const user = users[0];\r\n      if (user && user.password === password) {\r\n        // Remove password before storing/returning user data\r\n        const { password: _, ...safeUser } = user;\r\n        return safeUser;\r\n      }\r\n      throw new Error('Invalid credentials');\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getCurrentUser() {\r\n    try {\r\n      const userJson = localStorage.getItem('user');\r\n      if (!userJson) return null;\r\n      \r\n      const user = JSON.parse(userJson);\r\n      const response = await fetch(`${BASE_URL}/users/${user.id}`);\r\n      if (!response.ok) {\r\n        localStorage.removeItem('user');\r\n        return null;\r\n      }\r\n      const currentUser = await response.json();\r\n      const { password: _, ...safeUser } = currentUser;\r\n      return safeUser;\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  async getAllUsers() {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/users`);\r\n      const users = await response.json();\r\n      // Remove passwords before returning\r\n      return users.map(user => {\r\n        const { password, ...safeUser } = user;\r\n        return safeUser;\r\n      });\r\n    } catch (error) {\r\n      console.error('Get users error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createUser(userData) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/users`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...userData,\r\n          id: Date.now().toString(), // Simple ID generation\r\n        }),\r\n      });\r\n      const newUser = await response.json();\r\n      const { password, ...safeUser } = newUser;\r\n      return safeUser;\r\n    } catch (error) {\r\n      console.error('Create user error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateUser(id, userData) {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/users/${id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n      const updatedUser = await response.json();\r\n      const { password, ...safeUser } = updatedUser;\r\n      return safeUser;\r\n    } catch (error) {\r\n      console.error('Update user error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteUser(id) {\r\n    try {\r\n      await fetch(`${BASE_URL}/users/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Delete user error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}