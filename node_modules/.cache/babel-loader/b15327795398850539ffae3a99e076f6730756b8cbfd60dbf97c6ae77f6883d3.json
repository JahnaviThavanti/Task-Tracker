{"ast":null,"code":"var _jsxFileName = \"A:\\\\Projects\\\\FrontEnd\\\\React Apps\\\\task-tracker\\\\src\\\\contexts\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport { ROLES } from '../types';\nimport { authService } from '../services/authService';\n\n/**\n * Context for managing authentication state globally.\n * Provides user information and auth functions to all child components.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n/**\n * Provider component that wraps the app and makes auth available to all child components.\n * Manages user authentication state and provides login/logout functionality.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Child components to render\n */\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  // Track the authenticated user\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing user session on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n  }, []);\n\n  /**\n   * Handles user login.\n   * In a real app, this would verify credentials against a backend.\n   * \n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   */\n  const login = (email, password) => {\n    // TODO: Replace with actual API call\n    const mockUser = {\n      id: '1',\n      email,\n      role: ROLES.USER,\n      name: email.split('@')[0]\n    };\n    setUser(mockUser);\n    localStorage.setItem('user', JSON.stringify(mockUser));\n  };\n\n  /**\n   * Handles user logout.\n   * Clears user data from state and localStorage.\n   */\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * Custom hook to use authentication context.\n * Provides a convenient way to access auth functionality in any component.\n * \n * @returns {Object} Auth context value containing user data and auth functions\n * @throws {Error} If used outside of AuthProvider\n */\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","ROLES","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","savedUser","localStorage","getItem","JSON","parse","login","email","password","mockUser","id","role","USER","name","split","setItem","stringify","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["A:/Projects/FrontEnd/React Apps/task-tracker/src/contexts/authContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useContext } from 'react';\nimport { ROLES } from '../types';\nimport { authService } from '../services/authService';\n\n/**\n * Context for managing authentication state globally.\n * Provides user information and auth functions to all child components.\n */\nexport const AuthContext = createContext(null);\n\n/**\n * Provider component that wraps the app and makes auth available to all child components.\n * Manages user authentication state and provides login/logout functionality.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Child components to render\n */\nexport function AuthProvider({ children }) {\n  // Track the authenticated user\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing user session on mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n  }, []);\n\n  /**\n   * Handles user login.\n   * In a real app, this would verify credentials against a backend.\n   * \n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   */\n  const login = (email, password) => {\n    // TODO: Replace with actual API call\n    const mockUser = {\n      id: '1',\n      email,\n      role: ROLES.USER,\n      name: email.split('@')[0]\n    };\n    setUser(mockUser);\n    localStorage.setItem('user', JSON.stringify(mockUser));\n  };\n\n  /**\n   * Handles user logout.\n   * Clears user data from state and localStorage.\n   */\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Custom hook to use authentication context.\n * Provides a convenient way to access auth functionality in any component.\n * \n * @returns {Object} Auth context value containing user data and auth functions\n * @throws {Error} If used outside of AuthProvider\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACtE,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,WAAW,QAAQ,yBAAyB;;AAErD;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACbL,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMK,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAE,GAAG;MACPH,KAAK;MACLI,IAAI,EAAExB,KAAK,CAACyB,IAAI;MAChBC,IAAI,EAAEN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1B,CAAC;IACDlB,OAAO,CAACa,QAAQ,CAAC;IACjBP,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEX,IAAI,CAACY,SAAS,CAACP,QAAQ,CAAC,CAAC;EACxD,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBrB,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,oBACE5B,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,IAAI;MAAEW,KAAK;MAAEW;IAAO,CAAE;IAAAxB,QAAA,EAClDA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA9B,EAAA,CAjDgBF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAwD5B,OAAO,SAASkC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,MAAMC,OAAO,GAAG1C,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACqC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}