{"ast":null,"code":"var _jsxFileName = \"A:\\\\Projects\\\\FrontEnd\\\\React Apps\\\\task-tracker\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TaskItem extends Component {\n  constructor(props) {\n    super(props);\n    //Binding in the constructor\n    //This tells JS to always run handleClick with the correct 'this'\n    //Think of this as writing your name on your lunch so it doesn't get mixed up with others\n    //continue binding in the regular method\n    this.handleClick = e => {\n      e.stopPropagation();\n      this.props.onToggle();\n    };\n    this.handleDelete = e => {\n      e.stopPropagation();\n      this.props.onDelete();\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  render() {\n    //Destructuring props makes our code cleaner\n    const {\n      title,\n      priority,\n      completed,\n      reward\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `task-item ${completed ? 'completed' : ''}`,\n      onClick: this.handleClick,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Priority: \", priority]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: completed ? 'Complete' : 'Incomplete'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reward: \", reward]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this);\n  }\n}\nfunction AddTask({\n  onAdd\n}) {\n  _s();\n  //state for form inputs\n  const [title, setTitle] = useState('');\n  const [priority, setPriority] = useState('Low');\n  const [reward, setReward] = useState(0);\n\n  //handle form submission\n  const handleSubmit = e => {\n    //prevent the form from causing a page reload\n    e.preventDefault();\n    //validation\n    if (!title.trim()) {\n      alert('Please enter a task title');\n      return;\n    }\n\n    //create new task object\n    const newTask = {\n      title: title.trim(),\n      priority,\n      completed: false,\n      reward,\n      id: Date.now() //simple method for generating a unique id from the current date/time\n    };\n\n    //call the onAdd function passed from the parent\n    onAdd(newTask);\n\n    //reset the form\n    setTitle('');\n    setPriority('Low');\n    setReward(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"add-task-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: [\"Task Title:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"required\",\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"title\",\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        placeholder: \"Enter task title\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"priority\",\n        children: \"Priority Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"priority\",\n        value: priority,\n        onChange: e => setPriority(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Low\",\n          children: \"Low\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Medium\",\n          children: \"Medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"High\",\n          children: \"High\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"reward\",\n        children: \"Reward Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"reward\",\n        type: \"number\",\n        value: reward,\n        onChange: e => setReward(e.target.value),\n        placeholder: \"Enter reward amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(AddTask, \"1GcFiQ/AIQJta/EdqeNshxh86d4=\");\n_c = AddTask;\nfunction TaskList() {\n  _s2();\n  const [tasks, setTasks] = useState([\n    // {id: 1, \n    // title: \"Complete React Lab\", \n    // priority: \"High\",\n    // completed: false \n    // },\n    // {id: 2, \n    // title: \"Study Components\", \n    // priority: \"Medium\",\n    // completed: false \n    // },\n    // {id: 3, \n    // title: \"Practice Coding\", \n    // priority: \"High\",\n    // completed: false \n    // }\n  ]);\n  const addTask = newTask => {\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  //Function to delete a task\n  const deleteTask = taskId => {\n    //optional: add information\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      //Filter out the task with the matching id\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    }\n  };\n\n  //Function to toggle task completion\n  function toggleTask(taskId) {\n    //setTasks is our state updater from useState\n    setTasks(tasks.map(task => {\n      //For each task, check if it's the one we want to toggle\n      if (task.id === taskId) {\n        //when true, create a new object with all existing properties, but flip completed status\n        return {\n          ...task,\n          completed: !task.completed\n        };\n      }\n      //These are not the tasks you're looking for\n      return task;\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: [/*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks\",\n      children: tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-tasks\",\n        children: \"No tasks yet. Add some tasks to start taskin'!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this) : tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        title: task.title,\n        priority: task.priority,\n        completed: task.completed,\n        reward: task.reward,\n        onToggle: () => toggleTask(task.id),\n        onDelete: () => deleteTask(task.id)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n// function UncontrolledTaskForm({onSubmit}){\n//     //useRef creates a \"box\" to hold a value that persists between renders\n//     //think of it like a sticky note that doesn't trigger re-renders\n\n//     const titleInputRef = useRef(null);\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault(); //stop the form from causing a page reload\n\n//     //get the current value from our ref (sticky note)\n//     const title = titleInputRef.current.value;\n//     onSubmit(title);\n//     }\n\n//     return(\n//         <form onSubmit={handleSubmit}>\n//             <input\n//             type=\"text\"\n//             ref={titleInputRef}\n//             defaultValue=\"\"\n//             />\n//             <button type=\"submit\">Add Task</button>\n//         </form>\n//     )\n// }\n\n// //Controlled component example\n// function ControlledTaskForm({onSubmit}){\n//     //useState creates a \"watched\" value that triggers re-renders\n//     const [title, setTitle] = useState('');\n\n//     const handleSubmit = (e) => {\n//         e.preventDefault();\n//         onSubmit(title);\n//         setTitle(''); // Clear the input after submission\n//     };\n\n//     //every keystroke updates our state\n//     const handleChange = (e) => {\n//         setTitle(e.target.value);\n//     }\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <input\n//                 type=\"text\"\n//                 value={title}\n//                 onChange={handleChange}\n//             />\n//             <button type =\"submit\">Add Task</button>\n//         </form>\n//     );\n// }\n\n// Validation function that returns an object of errors\n_s2(TaskList, \"hMS0qHx6S4rOTQEM1YSI5pG7rUk=\");\n_c2 = TaskList;\nconst validateForm = formData => {\n  // Initialize empty errors object\n  // We'll add error messages to this if we find problems\n  const [errors, setErrors] = {};\n\n  // Check for empty title after trimming whitespace\n  if (!formData.title.trim()) {\n    errors.title = 'Title is required';\n  }\n\n  // Check title length\n  // This prevents users from entering extremely long titles\n  if (formData.title.length > 50) {\n    errors.title = 'Title must be less than 50 characters';\n  }\n\n  // If priority isn't one of our valid options\n  // This prevents manipulation of select values\n  if (!['Low', 'Medium', 'High'].includes(formData.priority)) {\n    errors.priority = 'Invalid priority level';\n  }\n\n  // If dueDate is provided, ensure it's not in the past\n  if (formData.dueDate) {\n    const today = new Date();\n    const dueDate = new Date(formData.dueDate);\n    if (dueDate < today) {\n      errors.dueDate = 'Due date cannot be in the past';\n    }\n  }\n\n  // Return the errors object\n  // Will be empty if no validation errors found\n  return errors;\n};\nfunction AddTaskForm({\n  onAdd\n}) {\n  _s3();\n  // Initialize all form fields in one state object\n  // This is more maintainable than separate useState for each field\n  const [formData, setFormData] = useState({\n    title: '',\n    // Store the task title\n    priority: 'Medium',\n    // Default priority value\n    dueDate: '',\n    // Optional due date field\n    reward: '' //set reward amount\n  });\n\n  // Universal change handler for all form inputs\n  // This saves us from writing separate handlers for each input\n  const handleChange = e => {\n    // Destructure the event target properties we need\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Update state using the functional update pattern\n    // This ensures we're always working with the latest state\n    setFormData(prevData => ({\n      ...prevData,\n      // Spread all existing form data\n      [name]: value // Update only the field that changed\n      // [name] is a computed property name - it uses the actual\n      // value of 'name' as the key\n    }));\n  };\n  const handleSubmit = e => {\n    // Prevent the default form submission\n    // This stops the page from reloading\n    e.preventDefault();\n\n    // Form validation\n    // trim() removes whitespace from both ends of the string\n    if (!formData.title.trim()) {\n      alert('Please enter a task title');\n      return; // Exit early if validation fails\n    }\n\n    // If we get here, validation passed\n    // Call the function passed from parent with our form data\n    onAdd(formData);\n\n    // Reset form to initial state\n    // This gives users immediate feedback that their submission worked\n    setFormData({\n      title: '',\n      priority: 'Medium',\n      dueDate: '',\n      reward: ''\n    });\n  };\n  return (\n    /*#__PURE__*/\n    // The className helps with styling and identifying the form\n    _jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"add-task-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: [\"Task Title: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"required\",\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"title\" // Matches the htmlFor in label\n          ,\n          name: \"title\" // Matches the property name in formData\n          ,\n          type: \"text\",\n          value: formData.title // Controlled input - React controls the value\n          ,\n          onChange: handleChange // Called on every keystroke\n          ,\n          placeholder: \"Enter task title\" // Helper text for users\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"priority\",\n          children: \"Priority Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"priority\",\n          name: \"priority\",\n          value: formData.priority,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"reward\",\n          children: \"Reward Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"reward\",\n          name: \"reward\",\n          value: \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dueDate\",\n          children: \"Due Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"dueDate\",\n          name: \"dueDate\",\n          type: \"date\" // HTML5 date picker\n          ,\n          value: formData.dueDate,\n          onChange: handleChange\n          // min={new Date().toISOString().split('T')[0]} // Optional: Prevent past dates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)\n  );\n}\n_s3(AddTaskForm, \"zMbj1qtoZ6tT0P2ihmctKg/soFU=\");\n_c3 = AddTaskForm;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AddTask\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"AddTaskForm\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["useRef","useState","Component","jsxDEV","_jsxDEV","TaskItem","constructor","props","handleClick","e","stopPropagation","onToggle","handleDelete","onDelete","bind","render","title","priority","completed","reward","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","AddTask","onAdd","_s","setTitle","setPriority","setReward","handleSubmit","preventDefault","trim","alert","newTask","id","Date","now","onSubmit","htmlFor","type","value","onChange","target","placeholder","required","_c","TaskList","_s2","tasks","setTasks","addTask","prevTasks","deleteTask","taskId","window","confirm","filter","task","toggleTask","map","length","_c2","validateForm","formData","errors","setErrors","includes","dueDate","today","AddTaskForm","_s3","setFormData","handleChange","name","prevData","_c3","App","_c4","$RefreshReg$"],"sources":["A:/Projects/FrontEnd/React Apps/task-tracker/src/App.js"],"sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nclass TaskItem extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        //Binding in the constructor\r\n        //This tells JS to always run handleClick with the correct 'this'\r\n        //Think of this as writing your name on your lunch so it doesn't get mixed up with others\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    //continue binding in the regular method\r\n    handleClick = (e) => {\r\n        e.stopPropagation();\r\n        this.props.onToggle();\r\n    }\r\n\r\n    handleDelete = (e) => {\r\n        e.stopPropagation();\r\n        this.props.onDelete();\r\n    };\r\n\r\n    render(){\r\n        //Destructuring props makes our code cleaner\r\n        const { title, priority, completed, reward} = this.props;\r\n    return (\r\n        <div\r\n            className={`task-item ${completed ? 'completed' : ''}`}\r\n            onClick={this.handleClick}\r\n        >\r\n            <h3>{title}</h3>\r\n            <p>Priority: {priority}</p>\r\n            <p>{completed ? 'Complete' : 'Incomplete'}</p>\r\n            <p>Reward: {reward}</p>\r\n            <button onClick={this.handleDelete}>Delete</button>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nfunction AddTask({onAdd}){\r\n    //state for form inputs\r\n    const [title, setTitle] = useState('');\r\n    const [priority, setPriority] = useState('Low');\r\n    const [reward, setReward] = useState(0);\r\n\r\n    //handle form submission\r\n    const handleSubmit = (e) => {\r\n        //prevent the form from causing a page reload\r\n        e.preventDefault();\r\n        //validation\r\n        if(!title.trim()){\r\n            alert('Please enter a task title');\r\n            return;\r\n        }\r\n\r\n    //create new task object\r\n    const newTask = {\r\n        title: title.trim(),\r\n        priority,\r\n        completed: false,\r\n        reward,\r\n        id: Date.now() //simple method for generating a unique id from the current date/time\r\n    }\r\n\r\n    //call the onAdd function passed from the parent\r\n    onAdd(newTask);\r\n\r\n    //reset the form\r\n    setTitle('');\r\n    setPriority('Low');\r\n    setReward(0)\r\n};\r\n\r\nreturn (\r\n    <form onSubmit={handleSubmit} className=\"add-task-form\">\r\n        \r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"title\">\r\n                Task Title:\r\n                <span className=\"required\">*</span>\r\n            </label>\r\n            <input\r\n            id=\"title\"\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            placeholder=\"Enter task title\"\r\n            required\r\n            />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"priority\">Priority Level</label>\r\n            <select\r\n            id=\"priority\"\r\n            value={priority}\r\n            onChange={(e) => setPriority(e.target.value)}\r\n            >\r\n                <option value=\"Low\">Low</option>\r\n                <option value=\"Medium\">Medium</option>\r\n                <option value=\"High\">High</option>\r\n            </select>\r\n        </div>\r\n        <button type=\"submit\">Add Task</button>\r\n        \r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reward\">Reward Amount</label>\r\n          <input\r\n          id=\"reward\"\r\n          type=\"number\"\r\n          value={reward}\r\n          onChange={(e) => setReward(e.target.value)}\r\n          placeholder=\"Enter reward amount\"\r\n          />\r\n        </div>\r\n        </form>\r\n        \r\n);\r\n}\r\nfunction TaskList() {\r\n    const [tasks, setTasks] = useState([\r\n        // {id: 1, \r\n        // title: \"Complete React Lab\", \r\n        // priority: \"High\",\r\n        // completed: false \r\n        // },\r\n        // {id: 2, \r\n        // title: \"Study Components\", \r\n        // priority: \"Medium\",\r\n        // completed: false \r\n        // },\r\n        // {id: 3, \r\n        // title: \"Practice Coding\", \r\n        // priority: \"High\",\r\n        // completed: false \r\n        // }\r\n    ]);\r\n\r\n    \r\n    const addTask = (newTask) => {\r\n        setTasks(prevTasks => [...prevTasks, newTask]);\r\n    };\r\n    \r\n    //Function to delete a task\r\n    const deleteTask = (taskId) => {\r\n        //optional: add information\r\n        if (window.confirm('Are you sure you want to delete this task?')) {\r\n            //Filter out the task with the matching id\r\n            setTasks(prevTasks =>\r\n             prevTasks.filter(task => task.id !== taskId)\r\n            );\r\n        }\r\n    };\r\n    \r\n    //Function to toggle task completion\r\n    function toggleTask(taskId) {\r\n        //setTasks is our state updater from useState\r\n        setTasks(tasks.map(task => { \r\n            //For each task, check if it's the one we want to toggle\r\n            if(task.id === taskId){\r\n                //when true, create a new object with all existing properties, but flip completed status\r\n            return {\r\n                ...task,\r\n                completed: !task.completed\r\n            };\r\n            }\r\n            //These are not the tasks you're looking for\r\n            return task;\r\n        }));\r\n    }\r\n          \r\n\r\n    return (\r\n    <div className=\"task-list\">\r\n        <AddTask onAdd={addTask} />\r\n        <div className=\"tasks\">\r\n            {tasks.length === 0 ? (\r\n                <p className=\"no-tasks\">No tasks yet. Add some tasks to start taskin'!</p>\r\n            ) : (\r\n                tasks.map(task => (\r\n                    <TaskItem                  \r\n                        key={task.id}\r\n                        title={task.title}\r\n                        priority={task.priority}\r\n                        completed={task.completed}\r\n                        reward={task.reward}\r\n                        onToggle={() => toggleTask(task.id)}\r\n                        onDelete={() => deleteTask(task.id)}\r\n                        />\r\n                ))\r\n            )}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n// function UncontrolledTaskForm({onSubmit}){\r\n//     //useRef creates a \"box\" to hold a value that persists between renders\r\n//     //think of it like a sticky note that doesn't trigger re-renders\r\n\r\n//     const titleInputRef = useRef(null);\r\n\r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault(); //stop the form from causing a page reload\r\n\r\n//     //get the current value from our ref (sticky note)\r\n//     const title = titleInputRef.current.value;\r\n//     onSubmit(title);\r\n//     }\r\n\r\n//     return(\r\n//         <form onSubmit={handleSubmit}>\r\n//             <input\r\n//             type=\"text\"\r\n//             ref={titleInputRef}\r\n//             defaultValue=\"\"\r\n//             />\r\n//             <button type=\"submit\">Add Task</button>\r\n//         </form>\r\n//     )\r\n// }\r\n\r\n// //Controlled component example\r\n// function ControlledTaskForm({onSubmit}){\r\n//     //useState creates a \"watched\" value that triggers re-renders\r\n//     const [title, setTitle] = useState('');\r\n    \r\n//     const handleSubmit = (e) => {\r\n//         e.preventDefault();\r\n//         onSubmit(title);\r\n//         setTitle(''); // Clear the input after submission\r\n//     };\r\n\r\n//     //every keystroke updates our state\r\n//     const handleChange = (e) => {\r\n//         setTitle(e.target.value);\r\n//     }\r\n\r\n//     return (\r\n//         <form onSubmit={handleSubmit}>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={title}\r\n//                 onChange={handleChange}\r\n//             />\r\n//             <button type =\"submit\">Add Task</button>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// Validation function that returns an object of errors\r\nconst validateForm = (formData) => {\r\n    // Initialize empty errors object\r\n    // We'll add error messages to this if we find problems\r\n    const [errors, setErrors] = {};\r\n    \r\n    // Check for empty title after trimming whitespace\r\n    if (!formData.title.trim()) {\r\n      errors.title = 'Title is required';\r\n    }\r\n    \r\n    // Check title length\r\n    // This prevents users from entering extremely long titles\r\n    if (formData.title.length > 50) {\r\n      errors.title = 'Title must be less than 50 characters';\r\n    }\r\n    \r\n    // If priority isn't one of our valid options\r\n    // This prevents manipulation of select values\r\n    if (!['Low', 'Medium', 'High'].includes(formData.priority)) {\r\n      errors.priority = 'Invalid priority level';\r\n    }\r\n    \r\n    // If dueDate is provided, ensure it's not in the past\r\n    if (formData.dueDate) {\r\n      const today = new Date();\r\n      const dueDate = new Date(formData.dueDate);\r\n      if (dueDate < today) {\r\n        errors.dueDate = 'Due date cannot be in the past';\r\n      }\r\n    }\r\n    \r\n    // Return the errors object\r\n    // Will be empty if no validation errors found\r\n    return errors;\r\n  };\r\n  \r\n  \r\nfunction AddTaskForm({ onAdd }) {\r\n    // Initialize all form fields in one state object\r\n    // This is more maintainable than separate useState for each field\r\n    const [formData, setFormData] = useState({\r\n      title: '',        // Store the task title\r\n      priority: 'Medium', // Default priority value\r\n      dueDate: '',      // Optional due date field\r\n      reward: ''        //set reward amount\r\n    });\r\n  \r\n    // Universal change handler for all form inputs\r\n    // This saves us from writing separate handlers for each input\r\n    const handleChange = (e) => {\r\n      // Destructure the event target properties we need\r\n      const { name, value } = e.target;\r\n      \r\n      // Update state using the functional update pattern\r\n      // This ensures we're always working with the latest state\r\n      setFormData(prevData => ({\r\n        ...prevData,     // Spread all existing form data\r\n        [name]: value    // Update only the field that changed\r\n                        // [name] is a computed property name - it uses the actual\r\n                        // value of 'name' as the key\r\n      }));\r\n    };\r\n  \r\n    const handleSubmit = (e) => {\r\n      // Prevent the default form submission\r\n      // This stops the page from reloading\r\n      e.preventDefault();\r\n      \r\n      // Form validation\r\n      // trim() removes whitespace from both ends of the string\r\n      if (!formData.title.trim()) {\r\n        alert('Please enter a task title');\r\n        return;  // Exit early if validation fails\r\n      }\r\n  \r\n      // If we get here, validation passed\r\n      // Call the function passed from parent with our form data\r\n      onAdd(formData);\r\n  \r\n      // Reset form to initial state\r\n      // This gives users immediate feedback that their submission worked\r\n      setFormData({\r\n        title: '',\r\n        priority: 'Medium',\r\n        dueDate: '',\r\n        reward: ''\r\n      });\r\n    };\r\n  \r\n    return (\r\n      // The className helps with styling and identifying the form\r\n      <form onSubmit={handleSubmit} className=\"add-task-form\">\r\n        {/* Each form group is wrapped in a div for styling/structure */}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\">\r\n            Task Title: {/* htmlFor matches input id for accessibility */}\r\n            <span className=\"required\">*</span> {/* Visual required indicator */}\r\n          </label>\r\n          <input\r\n            id=\"title\"           // Matches the htmlFor in label\r\n            name=\"title\"         // Matches the property name in formData\r\n            type=\"text\"\r\n            value={formData.title} // Controlled input - React controls the value\r\n            onChange={handleChange} // Called on every keystroke\r\n            placeholder=\"Enter task title\" // Helper text for users\r\n          />\r\n        </div>\r\n  \r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"priority\">Priority Level:</label>\r\n          <select\r\n            id=\"priority\"\r\n            name=\"priority\"\r\n            value={formData.priority}\r\n            onChange={handleChange}\r\n          >\r\n            {/* Each option represents a priority level */}\r\n            <option value=\"Low\">Low</option>\r\n            <option value=\"Medium\">Medium</option>\r\n            <option value=\"High\">High</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"reward\">Reward Amount:</label>\r\n          <input\r\n          id=\"reward\"\r\n          name=\"reward\"\r\n          value=\"\"\r\n          onChange={handleChange}\r\n           />\r\n        </div>\r\n  \r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"dueDate\">Due Date:</label>\r\n          <input\r\n            id=\"dueDate\"\r\n            name=\"dueDate\"\r\n            type=\"date\"         // HTML5 date picker\r\n            value={formData.dueDate}\r\n            onChange={handleChange}\r\n            // min={new Date().toISOString().split('T')[0]} // Optional: Prevent past dates\r\n          />\r\n        </div>\r\n  \r\n        <button type=\"submit\">Add Task</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\nexport default function App() {\r\n    return(\r\n    <div className=\"app\">\r\n        <TaskList />\r\n    </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}