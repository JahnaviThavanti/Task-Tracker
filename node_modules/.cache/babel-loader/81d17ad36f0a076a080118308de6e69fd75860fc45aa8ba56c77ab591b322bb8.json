{"ast":null,"code":"var _jsxFileName = \"A:\\\\Projects\\\\FrontEnd\\\\React Apps\\\\task-tracker\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/authContext';\nimport { PERMISSIONS } from '../types';\nimport { TaskItem } from './TaskItem';\nimport { AddTask } from './AddTask';\n\n/**\n * Main task list component that manages task state and operations.\n * Handles task persistence, CRUD operations, and permission checks.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskList() {\n  _s();\n  // State for storing tasks\n  const [tasks, setTasks] = useState([]);\n  const {\n    user\n  } = useAuth();\n\n  /**\n   * Load tasks from localStorage when component mounts\n   * or when user changes\n   */\n  useEffect(() => {\n    const savedTasks = localStorage.getItem(`tasks_${user.id}`);\n    if (savedTasks) {\n      setTasks(JSON.parse(savedTasks));\n    }\n  }, [user.id]);\n\n  /**\n   * Save tasks to localStorage whenever they change\n   */\n  useEffect(() => {\n    localStorage.setItem(`tasks_${user.id}`, JSON.stringify(tasks));\n  }, [tasks, user.id]);\n\n  /**\n   * Checks if the current user has permission for a specific action\n   * \n   * @param {string} action - The action to check ('create', 'read', 'update', 'delete')\n   * @returns {boolean} Whether the user has permission\n   */\n  const hasPermission = action => {\n    return PERMISSIONS[user.role].includes(action);\n  };\n\n  /**\n   * Adds a new task to the list\n   * \n   * @param {Object} newTask - The task to add\n   */\n  const addTask = newTask => {\n    if (!hasPermission('create')) {\n      alert('You do not have permission to create tasks');\n      return;\n    }\n    setTasks(prevTasks => [...prevTasks, {\n      ...newTask,\n      userId: user.id\n    }]);\n  };\n\n  /**\n   * Deletes a task from the list\n   * \n   * @param {string|number} taskId - ID of the task to delete\n   */\n  const deleteTask = taskId => {\n    if (!hasPermission('delete')) {\n      alert('You do not have permission to delete tasks');\n      return;\n    }\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    }\n  };\n\n  /**\n   * Toggles the completion status of a task\n   * \n   * @param {string|number} taskId - ID of the task to toggle\n   */\n  const toggleTask = taskId => {\n    if (!hasPermission('update')) {\n      alert('You do not have permission to update tasks');\n      return;\n    }\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        return {\n          ...task,\n          completed: !task.completed\n        };\n      }\n      return task;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: [hasPermission('create') && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks\",\n      children: tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-tasks\",\n        children: \"No tasks yet. Add some tasks to start taskin'!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        ...task,\n        onToggle: () => toggleTask(task.id),\n        onDelete: () => deleteTask(task.id),\n        canUpdate: hasPermission('update'),\n        canDelete: hasPermission('delete')\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"9lR/9iLZloMFbkqx/9HVqG9ZblA=\", false, function () {\n  return [useAuth];\n});\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useState","useEffect","useAuth","PERMISSIONS","TaskItem","AddTask","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","user","savedTasks","localStorage","getItem","id","JSON","parse","setItem","stringify","hasPermission","action","role","includes","addTask","newTask","alert","prevTasks","userId","deleteTask","taskId","window","confirm","filter","task","toggleTask","map","completed","className","children","onAdd","fileName","_jsxFileName","lineNumber","columnNumber","length","onToggle","onDelete","canUpdate","canDelete","_c","$RefreshReg$"],"sources":["A:/Projects/FrontEnd/React Apps/task-tracker/src/components/TaskList.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/authContext';\nimport { PERMISSIONS } from '../types';\nimport { TaskItem } from './TaskItem';\nimport { AddTask } from './AddTask';\n\n/**\n * Main task list component that manages task state and operations.\n * Handles task persistence, CRUD operations, and permission checks.\n */\nexport function TaskList() {\n  // State for storing tasks\n  const [tasks, setTasks] = useState([]);\n  const { user } = useAuth();\n\n  /**\n   * Load tasks from localStorage when component mounts\n   * or when user changes\n   */\n  useEffect(() => {\n    const savedTasks = localStorage.getItem(`tasks_${user.id}`);\n    if (savedTasks) {\n      setTasks(JSON.parse(savedTasks));\n    }\n  }, [user.id]);\n\n  /**\n   * Save tasks to localStorage whenever they change\n   */\n  useEffect(() => {\n    localStorage.setItem(`tasks_${user.id}`, JSON.stringify(tasks));\n  }, [tasks, user.id]);\n\n  /**\n   * Checks if the current user has permission for a specific action\n   * \n   * @param {string} action - The action to check ('create', 'read', 'update', 'delete')\n   * @returns {boolean} Whether the user has permission\n   */\n  const hasPermission = (action) => {\n    return PERMISSIONS[user.role].includes(action);\n  };\n\n  /**\n   * Adds a new task to the list\n   * \n   * @param {Object} newTask - The task to add\n   */\n  const addTask = (newTask) => {\n    if (!hasPermission('create')) {\n      alert('You do not have permission to create tasks');\n      return;\n    }\n    setTasks(prevTasks => [...prevTasks, { ...newTask, userId: user.id }]);\n  };\n\n  /**\n   * Deletes a task from the list\n   * \n   * @param {string|number} taskId - ID of the task to delete\n   */\n  const deleteTask = (taskId) => {\n    if (!hasPermission('delete')) {\n      alert('You do not have permission to delete tasks');\n      return;\n    }\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    }\n  };\n\n  /**\n   * Toggles the completion status of a task\n   * \n   * @param {string|number} taskId - ID of the task to toggle\n   */\n  const toggleTask = (taskId) => {\n    if (!hasPermission('update')) {\n      alert('You do not have permission to update tasks');\n      return;\n    }\n    setTasks(tasks.map(task => {\n      if (task.id === taskId) {\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    }));\n  };\n\n  return (\n    <div className=\"task-list\">\n      {/* Only show AddTask if user has create permission */}\n      {hasPermission('create') && <AddTask onAdd={addTask} />}\n      \n      <div className=\"tasks\">\n        {tasks.length === 0 ? (\n          <p className=\"no-tasks\">No tasks yet. Add some tasks to start taskin'!</p>\n        ) : (\n          tasks.map(task => (\n            <TaskItem\n              key={task.id}\n              {...task}\n              onToggle={() => toggleTask(task.id)}\n              onDelete={() => deleteTask(task.id)}\n              canUpdate={hasPermission('update')}\n              canDelete={hasPermission('delete')}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}